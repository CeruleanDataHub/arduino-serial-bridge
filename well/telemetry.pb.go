// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry.proto

package well

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WellTelemetryRequest struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Timestamp            string   `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                int32    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Voltage              float32  `protobuf:"fixed32,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current              float32  `protobuf:"fixed32,5,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WellTelemetryRequest) Reset()         { *m = WellTelemetryRequest{} }
func (m *WellTelemetryRequest) String() string { return proto.CompactTextString(m) }
func (*WellTelemetryRequest) ProtoMessage()    {}
func (*WellTelemetryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{0}
}

func (m *WellTelemetryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WellTelemetryRequest.Unmarshal(m, b)
}
func (m *WellTelemetryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WellTelemetryRequest.Marshal(b, m, deterministic)
}
func (m *WellTelemetryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WellTelemetryRequest.Merge(m, src)
}
func (m *WellTelemetryRequest) XXX_Size() int {
	return xxx_messageInfo_WellTelemetryRequest.Size(m)
}
func (m *WellTelemetryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WellTelemetryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WellTelemetryRequest proto.InternalMessageInfo

func (m *WellTelemetryRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *WellTelemetryRequest) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *WellTelemetryRequest) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *WellTelemetryRequest) GetVoltage() float32 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *WellTelemetryRequest) GetCurrent() float32 {
	if m != nil {
		return m.Current
	}
	return 0
}

type WellTelemetryResponse struct {
	Hash                 string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WellTelemetryResponse) Reset()         { *m = WellTelemetryResponse{} }
func (m *WellTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*WellTelemetryResponse) ProtoMessage()    {}
func (*WellTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edbfcf76559f568d, []int{1}
}

func (m *WellTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WellTelemetryResponse.Unmarshal(m, b)
}
func (m *WellTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WellTelemetryResponse.Marshal(b, m, deterministic)
}
func (m *WellTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WellTelemetryResponse.Merge(m, src)
}
func (m *WellTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_WellTelemetryResponse.Size(m)
}
func (m *WellTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WellTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WellTelemetryResponse proto.InternalMessageInfo

func (m *WellTelemetryResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*WellTelemetryRequest)(nil), "WellTelemetryRequest")
	proto.RegisterType((*WellTelemetryResponse)(nil), "WellTelemetryResponse")
}

func init() {
	proto.RegisterFile("telemetry.proto", fileDescriptor_edbfcf76559f568d)
}

var fileDescriptor_edbfcf76559f568d = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x49, 0xcd, 0x49,
	0xcd, 0x4d, 0x2d, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x9a, 0xc4, 0xc8, 0x25,
	0x12, 0x9e, 0x9a, 0x93, 0x13, 0x02, 0x13, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12,
	0xe2, 0x62, 0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85,
	0x64, 0xb8, 0x38, 0x4b, 0x32, 0x73, 0x53, 0x8b, 0x4b, 0x12, 0x73, 0x0b, 0x24, 0x98, 0xc0, 0x12,
	0x08, 0x01, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d,
	0xd6, 0x20, 0x08, 0x47, 0x48, 0x82, 0x8b, 0xbd, 0x2c, 0x3f, 0xa7, 0x24, 0x31, 0x3d, 0x55, 0x82,
	0x45, 0x81, 0x51, 0x83, 0x29, 0x08, 0xc6, 0x05, 0xc9, 0x24, 0x97, 0x16, 0x15, 0xa5, 0xe6, 0x95,
	0x48, 0xb0, 0x42, 0x64, 0xa0, 0x5c, 0x25, 0x6d, 0x2e, 0x51, 0x34, 0x37, 0x15, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x62, 0x73, 0x94, 0x91, 0x07, 0x17, 0x0b, 0x48, 0xb1, 0x90, 0x03, 0x17, 0x6f, 0x70,
	0x6a, 0x5e, 0x0a, 0x5c, 0x93, 0x90, 0xa8, 0x1e, 0x36, 0x8f, 0x49, 0x89, 0xe9, 0x61, 0x35, 0x5b,
	0x89, 0x21, 0x89, 0x0d, 0x1c, 0x24, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x67, 0xed,
	0x53, 0x25, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WellClient is the client API for Well service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WellClient interface {
	SendTelemetry(ctx context.Context, in *WellTelemetryRequest, opts ...grpc.CallOption) (*WellTelemetryResponse, error)
}

type wellClient struct {
	cc grpc.ClientConnInterface
}

func NewWellClient(cc grpc.ClientConnInterface) WellClient {
	return &wellClient{cc}
}

func (c *wellClient) SendTelemetry(ctx context.Context, in *WellTelemetryRequest, opts ...grpc.CallOption) (*WellTelemetryResponse, error) {
	out := new(WellTelemetryResponse)
	err := c.cc.Invoke(ctx, "/Well/SendTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WellServer is the server API for Well service.
type WellServer interface {
	SendTelemetry(context.Context, *WellTelemetryRequest) (*WellTelemetryResponse, error)
}

// UnimplementedWellServer can be embedded to have forward compatible implementations.
type UnimplementedWellServer struct {
}

func (*UnimplementedWellServer) SendTelemetry(ctx context.Context, req *WellTelemetryRequest) (*WellTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTelemetry not implemented")
}

func RegisterWellServer(s *grpc.Server, srv WellServer) {
	s.RegisterService(&_Well_serviceDesc, srv)
}

func _Well_SendTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WellTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WellServer).SendTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Well/SendTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WellServer).SendTelemetry(ctx, req.(*WellTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Well_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Well",
	HandlerType: (*WellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTelemetry",
			Handler:    _Well_SendTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetry.proto",
}
